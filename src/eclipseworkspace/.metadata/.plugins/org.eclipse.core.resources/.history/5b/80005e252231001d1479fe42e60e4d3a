/*-----------------------------------------------------------------------------------------------------------------------	
	Paketler (Packages) ve İsim Arama (Name lookup):
	Aşağıdaki maddelerde aksi beliritilmediği sürece "sınıf" kavramı aslında "user defined type" olarak anlaşılmalıdır. 
	"User defined type" olarak yalnızca sınıflar yoktur. İleride ele alacağımız yine referans türleri olan "user defined type"'lar
	için de aksi belirtilmediği sürece maddeler geçerli olacaktır. 
	
	Anahtar Notlar: Java kaynak kodlarını içeren ve genellikle ".java" uzantılı bi dosyaya (derlenen dosya) 
	"derleme birimi (compilation unit)" denir. Eğer ".java" dosyasında birden fazla sınıf söz konusu ise her bir sınıf bir
	derleme birimi olarak düşünülebilir
	
	Paketler:
	- javac her sınıf için ayrı bir ".class" uzantılı dosya (byte code) üretir. Bu işlem sınıflar aynı ".java" dosyasında
	olsa bile bu şekilde yapılır
	
	- Bir sınıf herhangi bir pakette olabilir. Bir proje içerisinde  kullanılan sınıfların aynı pakette olma 
	zorunluluğu yoktur.
	
	- Bir ".class" dosyasının ait olduğuu pakete ilişkin bir dizinde (directory) bulunması gerekir. Aslında ".java" 
	dosyaları için böyle bir zorunluluk yoktur. Ancak birçok IDE bunu kendi içinde zorunlu tutar.
	
	- Bir sınıf bulunduğu paket dışından (başka bir paketin içinden), paket ismi ve nokta operatörü ile kullanılabilir
	
	- Bir paket içerisinde bulunan bir sınıfın farklı bir paketten kullanılabilmesi için public olarak bildirilmesi
	gerekir. public olarak bildirilmeyen bir sınıf ancak aynı paketteki diğer sınıflar tarafından kullanılabilir (friendly/internal).
	
	- Farklı paketteki sınıflar için byte kodların da uygun yerde olması gerekir. Uygulamanın başlatıldığı dizin tüm paketlere
	ilişkin dizinlerin olması gereken dizindir. Ancak bu durumun da ayrıntıları ve istisnaları vardır.
	
	- Uygulamada kullanılan sınıflar içerisinde bir tane main metodu olmak zorunda değildir. Ancak şüphesiz "JVM"'e
	verilen byte koda ilişkin sınıfta (bu kesinlikle sınıf olmalıdır) uygun main metodunun olması gerekir. main metodunun
	aşağıdaki yapıda olması gerekir:
	
		public static void main(String [] args)
		
	"JVM"'e verilen sınıfa ilişkin main metoduna "giriş noktası (entry point)" dendiğini anımsayınız.
	
	- public olarak bildirilen bir sınıfın kendi ismiyle aynı isimde bir ".java" uzantılı dosyada olması zorunludur. Bu 
	durumda bir ".java" uzantılı dosyada yalnızca dosya ismi ile aynı isimde bir sınıf public olarak bildirilebilir.
	
	- Bir ".java" dosyası içerisinde public bir sınıf olmak zorunda değildir.
	
	- Bir ".java" dosyası içerisinde dosya ismi ile aynı isimde bir sınıf olmak zorunda değildir.
	
	- Bir ".java" dosyası içerisinde public olmayan istenildiği kadar sınıf yazılabilir. Bu sınıflar aynı pakette bildirilmiş
	olurlar.
	
	- Aynı paket içerisinde aynı isimde birden fazla sınıf bildirimi geçersizdir
	
	- Farklı paketler içerisinde aynı isimde sınıflar olabilir. Bu sınıflar aslında farklı türlerdir
	
	- Bir ".java" dosyasında farklı bildirimleri geçersizdir. Aslında bu kural "paket bildirminin kaynak kodun en tepesinde
	olması zorunludur" kuralının bir sonucudur
	
	- Hiçbir paket bildirimi içerisinde olmayan ".java" dosyalarında bildirilen sınıflar "isimsiz paket (unnamed package)"
	denilen bir paket içerisinde bulunurlar. Ancak projelerde isimsiz bir paket içerisinde sınıf bildirimi yapılmamalıdır
	
	- Bir paket içerisinde alt paketler (sub packages) olabilir. Alt paketler
		package <paket ismi>.<alt paket ismi>.<alt paket ismi>...
	biçiminde bildirilir. Alt paketlerde bulunan sınıfların ".class" dosyaları paket hiyerarşisine ilişkin uygbun alt 
	dizinlerde bulunmalıdır
	
	- Paketler içiçe bile olsa farklı paketlerdir. Yani örneğin org.csystem.util.string paketi içerisinde StringUtil
	isimli bir sınıf varsa org.csystem içerisinde de aynı isimde bir sınıf olabilir. Yani aslında paketlerin içiçe 
	olması mantıksal bir hiyerarşi kazandırır
	
	- 
-----------------------------------------------------------------------------------------------------------------------*/
package csd;

class App {
	public static void main(String [] args)
	{	
		
	}
}






