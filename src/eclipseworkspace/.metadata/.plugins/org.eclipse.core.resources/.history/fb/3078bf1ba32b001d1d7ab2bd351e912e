/*-----------------------------------------------------------------------------------------------------------------------	
	Sınıf Çalışması: Parametresi ile aldığı bir yazının içerisindeki baştan ilk en kısa palindromu döndüren getFirstShortestPalindrome
	ve sondan en kısa palindromu döndüren  
	isimli metodu yazınız ve aşağıdaki kod ile test ediniz. Yazı palindrom içermiyorsa metot boş string'e geri dönecektir.
	Örnek: adaeyedipadanadapideyeecealipapilaanastasmumsatsana
	Örnek: adaeyedipadanadapideyeecealipapilaanastasmumsatsanaaxxxxyyyyttuabc
-----------------------------------------------------------------------------------------------------------------------*/
package csd;

import java.util.Random;

class App {
	public static void main(String [] args)
	{	
		GetLastLongestPalindromeTest.run();
	}
}

class GetLastLongestPalindromeTest {
	public static void run()
	{
		java.util.Scanner kb = new java.util.Scanner(System.in);
		java.util.Random r = new java.util.Random();
		
		for (;;) {			
			System.out.print("Bir yazı giriniz:");
			String s = kb.nextLine();
			
			if ("elma".equals(s))
				break;
			
			System.out.println(StringUtil.getFirstLongestPalindrome(s));
		}
		
		System.out.println("Tekrar yapıyor musunuz?");
	}
}


class StringUtil {	
	public static String getLastShortestPalindrome(String s)
	{
		String longest = "";		
		int begin = 0;
		int len = s.length();
		
		while (begin != len) {
			int end = len;
			
			while (begin != end) {
				String str = s.substring(begin, end--);
				if (str.length() > 1 && isPalindrome(str) && longest.length() < str.length())
					longest = str;
			}
			
			++begin;
		}
		
		
		return longest;
	}
	
	public static boolean isPalindrome(String s)
	{
		int left = 0;
		int right = s.length() - 1;
		boolean cLeftFound = false;
		char cLeft = '\0', cRight = '\0';
		
		while (left < right) {
			if (!cLeftFound) {
				cLeft = Character.toLowerCase(s.charAt(left));
				
				if (!Character.isLetter(cLeft)) {
					++left;
					continue;
				}
				
				cLeftFound = true;
			}
			
			cRight= Character.toLowerCase(s.charAt(right));
			
			if (!Character.isLetter(cRight)) {
				--right;
				continue;
			}
			
			if (cLeft != cRight)
				return false;	
			
			
			++left;
			--right;
			cLeftFound = false;
		}
		
		return true;		
	}
}

